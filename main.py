import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
import openai

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã —Ä–∞—Å—Ç–µ–Ω–∏–π
PLANT_DB = {
    "–ø–æ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"status": "‚úÖ –ú–æ–∂–Ω–æ", "note": "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ."},
    "–ª—É–∫": {"status": "‚ùå –ù–µ–ª—å–∑—è", "note": "–¢–æ–∫—Å–∏—á–µ–Ω –¥–ª—è –∫—Ä–æ–ª–∏–∫–æ–≤."},
    "—Ç—ã—Å—è—á–µ–ª–∏—Å—Ç–Ω–∏–∫": {"status": "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ", "note": "–î–∞–≤–∞—Ç—å –ø–æ–Ω–µ–º–Ω–æ–≥—É."}
}

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Å–∫–∞–∂—É, –º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –¥–∞–≤–∞—Ç—å –∫—Ä–æ–ª–∏–∫—É üêáüåø")

@dp.message()
async def handle_photo(message: Message):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è.")
        return

    photo = message.photo[-1]
    photo_file = await bot.download(photo)
    photo_path = "plant.jpg"
    with open(photo_path, "wb") as f:
        f.write(photo_file.read())

    with open(photo_path, "rb") as image_file:
        response = openai.ChatCompletion.create(
            model="gpt-4-vision-preview",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ –∏ —Å–∫–∞–∂–∏, –º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –¥–∞–≤–∞—Ç—å –∫—Ä–æ–ª–∏–∫—É."},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_file.read().encode('base64').decode()}"}}
                    ],
                }
            ],
            max_tokens=1000,
        )

    content = response["choices"][0]["message"]["content"]

    found = None
    for name in PLANT_DB:
        if name.lower() in content.lower():
            found = name
            break

    if found:
        status = PLANT_DB[found]["status"]
        note = PLANT_DB[found]["note"]
        await message.answer(f"üå± –≠—Ç–æ: <b>{found.capitalize()}</b>
{status} ‚Äî {note}")
    else:
        await message.answer("‚ùì –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ –æ–Ω–æ –Ω–µ –≤ –±–∞–∑–µ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))